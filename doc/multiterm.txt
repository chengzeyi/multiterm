*multiterm.vim* A Multiple floating terminal toggling helper for NeoVim and Vim

Author:     Cheng Zeyi <ichengzeyi@gmail.com>
Source:     https://github.com/chengzeyi/multiterm.vim
Version:    1.0.0

==============================================================================
Contents                                                  *multiterm-contents*

    1. Introduction .................... |multiterm-introduction|
    2. Usage ........................... |multiterm-usage|
    3. Configuration ................... |multiterm-configuration|

==============================================================================
1. Introduction                                       *multiterm-introduction*

Multiterm is a multiple floating terminal toggling helper for NeoVim and Vim. It
allows you to toggle and switch between multiple floating terminal instances.
It smooths the operation by providing one single command and several different
mode mappings with count to help you win at floating terminals.

==============================================================================
2. Usage                                                     *multiterm-usage*

:[count]Multiterm[!] [cmd]                                        *:Multiterm*
Run |:Multiterm| to toggle your floating terminals.

By default, if you run :Multiterm without any count, the terminal with tag 1
will be toggled. If you want to add a new terminal instance, for example, you
could create a terminal with tag 3 by running :3Multiterm.

If you do not have any floating terminal instance, run :Multiterm [cmd] will
create a floating terminal with tag '1'. It is not suggested to run a
non-interactive [cmd] as the terminal session will end and get destroyed as
soon as [cmd] finishes if you run :Multiterm without '!'.

If your cursor is in a floating terminal window, run :Multiterm will close
that window and put the terminal session into background. Otherwise the most
recently used floating terminal instance will be toggled.

If you run :3Multiterm and do not have a floating terminal with tag '3'
created, a new floating terminal window with tag '3' will be created and
become the current active floating window.

If your tag '3' floating terminal is in the background, run :3Multiterm will
put the session into foreground. You could then run :Multiterm to close the
window and put it into background again.

[count] could be a number between 1 and 9 and is the tag of the floating
window that you want to activate. If it is not specified, the current active
floating terminal session will be closed, or the tag 1 session will be
activated in the condition that there is no active session.

[!] forces the terminal window not to close when the terminal job exits.
Otherwise, in NeoVim the window will be closed as immediately as the job exits
with a zero exit code, and in Vim the window will be closed when the job is
finished.

[cmd] is the optional command to run. if not specified, the current 'shell'
option value will be used.

<Plug>(Multiterm)                                          *<Plug>(Multiterm)*
|Multiterm| provides several mappings for you. it is suggested to use them
since you do not need to switch between different Vim modes to input the
command. This mappings are just like |:Multiterm| without any additional
argument.

Add the following into your config file to toggle Multiterm floating terminal
windows with <F12>:
>
    nmap <F12> <Plug>(Multiterm)
    tmap <F12> <Plug>(Multiterm)
    " If you want to toggle Multiterm in visual and insert mode
    xmap <F12> <Plug>(Multiterm)
    imap <F12> <Plug>(Multiterm)
<
==============================================================================
3. Configuration                                     *multiterm-configuration*

g:multiterm_opts                                            *g:multiterm_opts*
You can tweak the behavior of Nuake by setting |g:multiterm_opts| in your
config file.
>
    " Default options
    let g:multiterm_opts = {
                \ 'height': 'float2nr(&lines * 0.8)',
                \ 'width': 'float2nr(&columns * 0.8)',
                \ 'row': '(&lines - height) / 2',
                \ 'col': '(&columns - width) / 2',
                \ 'border_hl': 'Comment',
                \ 'border_chars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
                \ 'show_term_tag': 1,
                \ 'term_hl': 'Normal'
                \ }

    " This is what you should write in your configuration file
    if !exists('g:multiterm_opts')
        let g:multiterm_opts = {}
    endif
    " This option has a string value instead of number because it is uesd for
    " eval()
    let g:multiterm_opts.height = '30'
    ...
<
g:multiterm_opts.height                              *g:multiterm_opts.height*
    Set the height of the multiterm floating window (string to be evaluated).

g:multiterm_opts.width                                *g:multiterm_opts.width*
    Set the width of the multiterm floating window (string to be evaluated).

g:multiterm_opts.row                                    *g:multiterm_opts.row*
    Set the screen row position of the multiterm floating window (string to be
    evaluated).

g:multiterm_opts.col                                    *g:multiterm_opts.col*
    Set the screen col position of the multiterm floating window (string to be
    evaluated).

g:multiterm_opts.border_hl                        *g:multiterm_opts.border_hl*
    Set the border highlight of the multiterm floating window.

g:multiterm_opts.border_chars                  *g:multiterm_opts.border_chars*
    Set the border filling characters of the multiterm floating window.
    [top, right, bottom, left, top_left, top_right, bottom_right, bottom_left]

g:multiterm_opts.show_term_tag                *g:multiterm_opts.show_term_tag*
    Show the terminal tag on the top boarder on NeoVim when the terminal
    tag is greater than 1.

g:multiterm_opts.term_hl                            *g:multiterm_opts.term_hl*
    Set the highlight group of Normal stuff in the multiterm floating
    window.
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
